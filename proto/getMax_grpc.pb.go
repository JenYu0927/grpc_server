// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.18.0
// source: getMax.proto

package getMax

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	GetMax_FromTwo_FullMethodName  = "/getMax.getMax/fromTwo"
	GetMax_FromList_FullMethodName = "/getMax.getMax/fromList"
)

// GetMaxClient is the client API for GetMax service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetMaxClient interface {
	FromTwo(ctx context.Context, in *GetMaxRequest, opts ...grpc.CallOption) (*GetMaxResponse, error)
	FromList(ctx context.Context, in *GetListMaxRequest, opts ...grpc.CallOption) (*GetMaxResponse, error)
}

type getMaxClient struct {
	cc grpc.ClientConnInterface
}

func NewGetMaxClient(cc grpc.ClientConnInterface) GetMaxClient {
	return &getMaxClient{cc}
}

func (c *getMaxClient) FromTwo(ctx context.Context, in *GetMaxRequest, opts ...grpc.CallOption) (*GetMaxResponse, error) {
	out := new(GetMaxResponse)
	err := c.cc.Invoke(ctx, GetMax_FromTwo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *getMaxClient) FromList(ctx context.Context, in *GetListMaxRequest, opts ...grpc.CallOption) (*GetMaxResponse, error) {
	out := new(GetMaxResponse)
	err := c.cc.Invoke(ctx, GetMax_FromList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetMaxServer is the server API for GetMax service.
// All implementations must embed UnimplementedGetMaxServer
// for forward compatibility
type GetMaxServer interface {
	FromTwo(context.Context, *GetMaxRequest) (*GetMaxResponse, error)
	FromList(context.Context, *GetListMaxRequest) (*GetMaxResponse, error)
	mustEmbedUnimplementedGetMaxServer()
}

// UnimplementedGetMaxServer must be embedded to have forward compatible implementations.
type UnimplementedGetMaxServer struct {
}

func (UnimplementedGetMaxServer) FromTwo(context.Context, *GetMaxRequest) (*GetMaxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FromTwo not implemented")
}
func (UnimplementedGetMaxServer) FromList(context.Context, *GetListMaxRequest) (*GetMaxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FromList not implemented")
}
func (UnimplementedGetMaxServer) mustEmbedUnimplementedGetMaxServer() {}

// UnsafeGetMaxServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetMaxServer will
// result in compilation errors.
type UnsafeGetMaxServer interface {
	mustEmbedUnimplementedGetMaxServer()
}

func RegisterGetMaxServer(s grpc.ServiceRegistrar, srv GetMaxServer) {
	s.RegisterService(&GetMax_ServiceDesc, srv)
}

func _GetMax_FromTwo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetMaxServer).FromTwo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetMax_FromTwo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetMaxServer).FromTwo(ctx, req.(*GetMaxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GetMax_FromList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListMaxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetMaxServer).FromList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetMax_FromList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetMaxServer).FromList(ctx, req.(*GetListMaxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GetMax_ServiceDesc is the grpc.ServiceDesc for GetMax service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetMax_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "getMax.getMax",
	HandlerType: (*GetMaxServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "fromTwo",
			Handler:    _GetMax_FromTwo_Handler,
		},
		{
			MethodName: "fromList",
			Handler:    _GetMax_FromList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "getMax.proto",
}
